{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM ",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Cosas a tener en cuenta'\n\t\t\t\n# Para las direcciones de memoria no utilizamos extensión de signo. Las direcciones de memoria son positivas. La extensión de signo será necesaria cuando por ejemplo, tengamos un valor inmediato que puediera ser negativo y ese valor inmediato lo tengamos que mandar a otro lado \n# No se pueden atravesar los registros temporales en un mismo ciclo de reloj. El valor esta en el registro temporal una vez que haya acabado el ciclo anterior.\n# Tampoco podemos meter dos valores en el bus interno ni llegar a T3 desde el bus interno \n# La unica instruccion que no llevara el salto al fetch sera \"parar la ejecución de la máquina\"\n# La diferencia entre una direccion absoluta (para saltar directamente a una instruccion) y otra relativa (para saltar si una condicion se cumple) es que la absoluta se copia directamente a PC mientras que la relativa se suma a PC.\n# En las instrucciones que se tenga que cumplir algo para dar un salto hay que poner extensión de signo porque se puede saltar hacia atras.\n\n\n#\n# WepSIM (https://wepsim.github.io/wepsim/)\n#\n\n# Begin\n\nbegin\n{\n              # R0 <- 0\n              (EXCODE=0, T11, MR=1, SelC=0, LC=1),\n\n    fetch:    # MAR <- PC\n              # MBR <- Mem[MAR]\n              # IR  <- MBR, PC <- PC + 4\n              # jump to associated microcode for op. code\n          (T2, C0),   \t\t\t\t\t\t\t\t\t #MAR <-- PC\n          (TA, R, BW=11, M1=1, C1=1),\t\t #MM[MAR]<-- MBR\n          (M2, C2, T1, C3),\t\t\t\t\t\t\t #PC + 4 <-- PC,  MBR <--- IR\n          (A0, B=0, C=0),\t\t\t    \t\t\t #microsalto a la direccion asociada del codigo de operacion\n}\n\n\n#\n# RISC-V base to be used\n# Base RISC-V a usar\n#\n\nrdcycle reg1  {\n      co=000001,\n      nwords=1,\n      reg1=reg(25,21),\n      help='reg1 = lo accumulated clock cycles',\n      {\n           (MH=1, T12=1, SELC=10101, LC=1, A0=1, B=1, C=0)\n      }\n}\n\nadd reg1 reg2 reg3 {\n      co=000010,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='r1 = r2 + r3',\n      {\n          (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\n\nsub reg1 reg2 reg3 {\n      co=000011,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='r1 = r2 - r3',\n      {\n          (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1011, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\n\nmul reg1 reg2 reg3 {\n      co=000100,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='reg1 = reg2 * reg3',\n      {\n          (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\n\nlw rd offset(rs1) {\n      co=000101,\n      nwords=1,\n      rd=reg(25,21),\n      offset=inm(15,0),\n      rs1=reg(20,16),\n      help='rd = (MEM[rs1+offset+3] .. MEM[rs1+offset])',\n      {\n          (SE=1, OFFSET=0, SIZE=10000, T3=1, C5=1),\n          (MR=0, SELA=10000, MA=0, MB=1, MC=1, SELCOP=1010, T6=1, C0=1),\n          (TA=1, R=1, BW=11, M1=1, C1=1),\n          (T1=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)\n      }\n}\n\nsw reg1 val(reg2) {\n      co=000110,\n      nwords=1,\n      reg1 = reg(25,21),\n      val  = inm(15,0),\n      reg2 = reg(20,16),\n      help='MEM[rs1+offset+3 .. rs1+offset] = rs2',\n      {\n          (SE=1, OFFSET=0, SIZE=10000, T3=1, C5=1),\n          (MR=0, SELA=10000, MA=0, MB=1, MC=1, SELCOP=1010, T6=1, C0=1),\n          (MR=0,  SELA=10101, T9=1, M1=0, C1=1),\n          (BW=11, TA=1, TD=1, W=1,  A0=1, B=1, C=0)\n      }\n}\n\nbeq rs1 rs2 offset {\n      co=000111,\n      nwords=1,\n      rs1=reg(25,21),\n      rs2=reg(20,16),\n      offset=address(15,0)rel,\n      help='if (rs1 == rs2) pc += offset',\n      {\n           (T8, C5),\n           (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),\n           (A0=0, B=1, C=110, MADDR=bck2ftch2),\n           (T5, M7=0, C7),\n           (T2, C4),\n           (SE=1, OFFSET=0, SIZE=10000, T3, C5),\n           (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),\nbck2ftch2: (T5, M7=0, C7),\n           (A0=1, B=1, C=0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n      }\n}\n\n#Instrucciones añadidas para utilizar en el codigo ensamblador (suma de valor y entero y salto a dirección)\n\nandi reg1 reg2 val {\n     co=111111,\n     nwords=1,\n     reg1=reg(25,21),\n     reg2=reg(20,16),\n     val =inm(15,0),\n     help='r1 = r2 & val',\n     {\n          (SE=1, OFFSET=0, SIZE=10000, T3=1, C5=1),\n          (MC=1, MR=0, SELA=10000, MA=0, MB=01, SELCOP=1, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n     }\n}\n\nj addr {\n     co=010111,\n     nwords=1,\n     addr=address(15,0)abs,\n     help='pc = addr',\n     {\n          (SE=0, OFFSET=0, SIZE=10000, T3=1, M2=0, C2=1, A0=1, B=1, C=0)\n     }\n}\n\n\n#\n# Complex numbers\n#\n\n\n# -> Primera instruccion\nla r1 u32    {\n    co= 010001\n    nwords=2\n    r1=reg(25,21)\n    u32=address(63,32)abs\n    help='BR[RR1] ← U32',\n    {\n      #Cargamos el entero u32 (que es la direccion que vamos a cargar) en MAR\n      (T2, C0),\t\n      #Carga el dato en MBR pasando a MAR la dirección que hay en PC, para ello activamos R (read) ; TA (Para acceder al bus de direcciones y BW para lectura, C1 para cargar el dato\n      (TA, R, BW=11, M1=1, C1=1), \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n      #Cargamos en el registro r1 la direccion de memoria que es igual a U32 y volvemos al fetch para seguir con la siguiente instruccion\n      (M2, C2, T1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n  \t}\n}\n\n\n# -> Segunda instruccion\nsc r1 r2 (r3)     \n{\n  co= 010010\n  nwords= 1\n  r1= reg(25,21)\n  r2= reg(20,16)\n  r3= reg(15,11)\n  help=\t'MEM[RR3+0] ← BR[RR1] MEM[RR3+4] ← BR[RR2]'\n  {\n  #'Parte real; Val inmediato = 0'\n  #Cargamos la direccion de r3 en MAR\n  (MR=0, SELA=01011, T9=1, c0=1),\t\t\n  # Cargamos el contenido de r1 en MBR\n  (MR=0, SELA=10101, T9=1, M1=0, C1=1), \n  #Guardamos el contenido de r1 en la direccion de memoria que es igual al contenido de r3\n  (BW=11, TA=1, TD=1, W=1) \t\n   \n \t#'Parte imaginaria ; Val inmediato=4'\n  #Sumamos 4 al contenido de r3, y cargamos el resultado en MAR\n  (MR=0, SELA= 01011 , MA=0, MB=10, SelCop=01010, MC=1\tT6= 1, C0=1), \n  #Cargamos el contenido de r2 en MBR\n  (MR=0, SELA= 10000, T9=1, M1=0, C1=1),\n  #Guardamos el contenido de r2 en la direccion de memoria que es igual al contenido de r3+4 y volvemos al fetch \n  (BW=11, TA=1, TD=1, W=1,  A0=1, B=1, C=0) \n  }  \n}\n\n\n# -> Tercera instruccion\nlc r1 r2 (r3)     \n{\n\tco= 010011\n  nwords = 1\n\tr1=reg(25,21)\n\tr2=reg(20,16) \n\tr3=reg(15,11)\n  help= 'BR[RR1] ← MEM[RR3+0];BR[RR2] ← MEM[RR3+4]'\n  {\n   #'Parte real; Val inm=0'\n   #Cargamos la dirección de memoria de r3 en MAR\n   (MR=0, SELA= 01011, T9=1, C0=1), \n   #Leemos la dirección y cargamos el contenido de r3 en MBR \n   (TA= 1, R=1, BW=11, M1=1, C1=1),\n   #Cargamos el resultado en el registro r1 (para ello utilizamos RC), activando la extensión de signo\n   (T1=1, MR=0, SELC=10101, LC=1, SE=1) \n  \n    #'Parte imaginaria; val inm=4'\n   #Sumamos 4 al contenido del registro r3 y guardamos esa dirección en MAR\n   (MR=0, SELA= 01011, MA=0, MB= 10, SelCop=01010, MC=1, T6=1, C0=1), \n   #Leemos la dirección y cargamos el contenido de r3+4 en MBR\n   (TA=1,\tR=1, BW=11, M1=1, C1=1),\n   #Cargamos el resultado en el registro r2 (para ello utilizamos RC), activando la extensión de signo y volvemos al fetch\n   (T1=1, MR=0,\tSELC=10000, SE=1, LC=1, A0=1, B=1, C=0) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  }\n}\n\n  \n# -> Cuarta instruccion\naddc  r1 r2 r3 r4    \n{ \n\tco= 010100\n  nwords=1\n\tr1= reg(25,21)\n  r2= reg(20,16)\n  r3= reg(15,11)\n  r4= reg(10,6)\n  help= 'BR[RR1] ← BR[RR1] + BR[RR3]; BR[RR2] ← BR[RR2] + BR[RR4]'\n  {\n  #'Parte real'\n  #Sumamos el contenido del registro r1 al contenido de r3 y actualizamos los valores C, V, N, Z\n \t(MR=0, SELA= 10101, SELB= 01011, MA= 0, MB= 00, SelCop=\t01010, MC=1,\tT6=1, SELC= 10101, LC=1,\tSELP=11, M7=1, C7=1),\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  #'Parte imaginaria'\n  #Hacemos lo mismo que en la parte entera, pero con los registros r2 y r4, sin actualizar los valores de C,V,N,Z\n  (MR=0, SELA= 10000, SELB=00110, MA=0, MB= 00, SelCop= 01010, MC=1, T6=1, SELC= 10000, LC=1, A0=1, C=0, B=1) \n  }\n}\n\n# -> Quinta instruccion\nmulc  r1 r2 r3 r4    \n{\n  co= 010101\n  nwords=1\n  r1= reg(25,21)\n  r2= reg(20,16)\n  r3= reg(15,11)\n  r4= reg(10,6)\n  help= 'BR[RR1] ← BR[RR1] * BR[RR3] - BR[RR2] * BR[RR4]; BR[RR2] ← BR[RR1] * BR[RR4] + BR[RR2] * BR[RR3]'\n  {\n  #'Parte real'\n  #Hacemos la multiplicación de r1 y r3 y guardamos el resultado en el registro temporal RT1\n  (MR=0, SELA=10101, SELB=01011, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C4=1, SE=1),\n  #Hacemos la multiplicación de r2 y r4 y guardamos el resultado en el registro temporal RT2\n  (MR=0, SELA=10000, SELB=00110, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C5=1, SE=1), \n  #Hacemos la resta de RT1-RT2, y alamcenamos el resultado en RT3\n  (MA=1, MB=01, SelCop=01011, MC=1, T6=1 M1=0, C1=1, SELP=11, M7=1, C7=1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  #'Parte imaginaria'\n\t#Hacemos la multiplicación de r1 y r4 y guardamos el resultado en el registro temporal RT1\n  (MR=0, SELA=10101, SELB=00110, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C4=1 SE=1),\n  #Hacemos la multiplicación de r2 y r3 y guardamos el resultado en el registro temporal RT2  \n  (MR=0, SELA=10000, SELB=01011, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C5=1, SE=1),\n  #Hacemos la suma de RT1 + RT2 y alamcenamos el resultado en r2\n  (MA=1, MB=01, SelCop= 01010, MC=1, T6=1, SELC= 10000, LC=1, SELP=11, M7=1, C7=1)\n  #Actualizamos la parte real y volvemos al fetch\n  (T1=1, SELC=10101, LC=1, A0=1, B=1, C=0)\n  }\n}\n\n\n# -> Sexta instruccion\nbeqc  r1 r2 r3 r4 offset \n{\n  co= 110100\n  nwords=1\n  r1= reg(25,21)\n  r2= reg(20,16)\n  r3= reg(15,11)\n  r4=reg(10,6)\n  offset= address(5,0)rel,\n  help= 'if (r1 == r3) and (r2 == r4) pc += S6'\n  { \n    \t\t#MBR <- SR\n    \t\t(T8, M1=0, C1),\n    \t\t\n        #'Primera condicion'\n        #r1 - r3 y actualizo SR con los flags que vienen de la ultima operacion de la ALU\n        (SELA=10101, SELB=1011, MC=1, SELCOP=1011, SELP=11, M7, C7)\n    \t\t#if sr.z != 1, saltamos a beqc1. if sr.z == 1, saltamos a la siguiente microinstruccion\n        (A0=0, B=1, C=0110, MADDR=beqc1)\t\n    \t\t\n    \n    \t\t#'Segunda condicion'\n  \t\t\t#r2 - r4\n  \t\t\t(SELA=10000, SELB=110, MC=1, SELCOP=1011, SELP=11, M7, C7)\n  \t\t\t#if sr.z != 1, saltamos a beqc1. if sr.z == 1, saltamos a la siguiente microinstruccion\n        (A0=0, B=1, C=0110, MADDR=beqc1)\t\n        \n    \t\t#'Si no ha saltado a la etiqueta beqc1:'\n        # RT1 <- PC\n        (T2, C4),\n        #RT2 <- IR(OFFSET)\n        (SE=1, OFFSET=0, SIZE=110, T3, C5),\n        #PC <- RT1 + RT2\n        (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),\n        #SR <- MBR\n  \t\t\t(T1, M7=0, C7), \n  \t\t\t\nbeqc1: #SR <- MBR\n    \t (T1, M7=0, C7),\n  \t\t #salto al fetch\n       (A0=1, B=1, C=0)\t\n  } \t\t\n    \n}    \n\n# -> Septima instruccion\ncall u20     #Esto es un jal ra u20 \n{\n\tco=100001\n  nwords=1\n  u20=address(19,0)abs\n  help= 'BR[ra] ← PC; PC ← U20' \n  {\n  #MR=1 para que el registro no salga del IR. \n  (T2=1, SELC=00001, MR=1, LC)\n  #Cogemos del IR el entero u20 y lo cargamos en el PC\n  (SE=0, OFFSET=0, SIZE=10100, T3=1, C2=1, A0=1, B=1, C=0)\n  }  \n}\n\n\n# -> Octava instruccion\nret  #Esto es un jr ra \n{\n\tco=100010 \n  nwords=1\n  help='PC ← BR[ra]'\n  {\n   #MR=1 para que el registro no salga del IR. Pasamos el valor de ra por el bus interno para cargarlo en el PC.\n  (MR=1, SELA=00001, T9=1, M2=0, C2=1, A0=1, B=1, C=0)\n  }  \n}\n\n\n\n# -> Novena instruccion: esta no lleva salto al fetch\nhcf   \n{\n  co=100011\n  nwords=1\n  help= 'PC ← 0x00 ; SR ← 0x00'\n  {\n  (ExCode=0000, T11, M2=0, C2)\n  (T2=1, M7=0, C7=1)\n  }\n}\n\n#\n# Registers\n#\n\nregisters \n{\n\t\t0=(zero, x0),\n    1=(ra, x1),\n    2=(sp, x2) (stack_pointer),\n    3=(gp, x3),\n    4=(tp, x4),\n    5=(t0, x5),\n    6=(t1, x6),\n    7=(t2, x7),\n    8=(fp, x8),\n    9=(s1, x9),\n    10=(a0, x10),\n    11=(a1, x11),\n    12=(a2, x12),\n    13=(a3, x13),\n    14=(a4, x14),\n    15=(a5, x15),\n    16=(a6, x16),\n    17=(a7, x17),\n    18=(s2, x18),\n    19=(s3, x19),\n    20=(s4, x20),\n    21=(s5, x21),\n    22=(s6, x22),\n    23=(s7, x23),\n    24=(s8, x24),\n    25=(s9, x25),\n    26=(s10, x26),\n    27=(s11, x27),\n    28=(t3, x28),\n    29=(t4, x29),\n    30=(t5, x30),\n    31=(t6, x31)\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\n#\n# WepSIM (https://wepsim.github.io/wepsim/)\n#\n\n.data\n  a: .word 35, 15\t\t\t#primer numero complejo -> Tiene la forma: \".word parte real, parte imaginaria\"\n  b: .word 10, 20\t\t\t#segundo numero complejo -> Tiene la forma: \".word parte real, parte imaginaria\"    \t\t10,20   \n\t\n\n\n.text\n   no_ext: # Implementar con instrucciones RISC-V (sin la extensión)\n           #  if (a == b):\n           #      return a * b;\n           #  else\n           #      return a + b;\n\n          la t0, a   \t\t#t0 -> address de a\n          la s3, b\t \t\t#t1 -> address de b\n          lw s4, 0(t0) \t#t2 -> parte real de a -> primer real\n          lw s5, 4(t0)  #t3 -> parte imaginaria de a -> primer imaginario\n          lw s6, 0(s1)  #t4 -> parte real de b -> segundo real\n          lw s7, 4(s1)  #t5 -> parte imaginaria de b -> segundo imaginario\n\nbucle:  \n  \t\t\t\tbeq s4, s6, jump1  \n          j jump_2\n         \n         \njump1:   beq s5, s7, end_1 #En el caso que no se cumpla la condicion, pasamos a la siguiente instruccion (else)\n \t\t\t\t j jump_2\n\njump_2:\t #Para la suma, primero sumamos las partes reales y despues las partes imaginarias\n         add a0, s4, s6   \t\n         add a1, s5, s7\n         j end_2\n          \nend_1:\t #Para la multiplicacion asumimos que es como en el primer ejercicio , en el primer registro -> (primer real * segundo real) - (primer imaginario * segundo imaginario) \n\t\t\t\t # y en el segundo registro -> (primer real * segundo imaginario) + (primer imaginario * segundo real)\n\t\t\t\t mul s8, s4, s6\t\t\t\t\n         mul s9, s5, s7\n         mul s10, s4, s7\n         mul s11, s5, s6\n         #Pongo los registros en a0 y a1 para que se retornen\n         sub a0, s8, s9\t\t\t\t\t\t\t\n         add a1, s10 s11\n         j end_2\nend_2: \t\t\n\t\t\t\t ret\n\n\n\n\n  \n  with_ext:  #EXTENSIONES DEL EJERCICIO 1\n  \t\t\t\t\n  \t\t\t   la s3 a\n           la s4 b\n           lc s5 s6 (s3)\t\t\t\t\t\t\t#s5 -> primera parte real, s6 -> primera parte imaginaria\n           lc s7 s8 (s4)\t\t\t\t\t\t\t#s7 -> segunda parte real, s8 -> segunda parte imaginaria \n           \n           #Implementar con instrucciones RISC-V (con la extensión)\n           #if (a == b):\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n           beqc  s5 s7 s6 s8 offset \t\t\t\t\t#Si la condicion se cumple saltamos a la direccion offset\t\t\t\t\n           \n           #return a + b. Si no se salta al offset retornamos esta otra instruccion\n           addc  s5 s6 s7 s8 \n           #Pongo los registros en a0 y a1 para que se retornen con un andi que hemos añadido en el microcodigo\n           andi a0, s5, 0\n           andi a1, s6, 0\n           j end\n           \n\t\t\t\t\t#return a * b;\t\t\noffset:    mulc  s5 s6 s7 s8\n\t\t\t\t\t #Pongo los registros en a0 y a1 para que se retornen con un andi que hemos añadido en el microcodigo\n\t\t\t\t\t andi a0, s5, 0\n           andi a1, s6, 0\n\t\t\t\t\t j end\n     \nend:       ret \n      \n\n   main: \n           ##### WITH new extension #####\n           rdcycle x0\n           la a0, a\n           la a1, b\n           call with_ext\n           rdcycle s1\n           sub x1 x1 x0\n           \n           ##### WITHOUT extension ##### \n           rdcycle x0\n           la a0, a\n           la a1, b\n           call no_ext\n           rdcycle s2\n           sub x2 x2 x0\n\n           # the end\n           hcf\n\n\n",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1701643466205,\n  \"title\": \"clock 1 @ &#181;address 0\",\n  \"title_short\": \"clock 1,<br>&#181;add 0\",\n  \"content\": \"register R2 = 0x100000; register PC = 0x809c; memory 0x1000 = 0x23; memory 0x1004 = 0xf; memory 0x1008 = 0xa; memory 0x100c = 0x14; memory 0x8000 = 0x44a00000; memory 0x8004 = 0x1000; memory 0x8008 = 0x46600000; memory 0x800c = 0x1008; memory 0x8010 = 0x16850000; memory 0x8014 = 0x16a50004; memory 0x8018 = 0x16c90000; memory 0x801c = 0x16e90004; memory 0x8020 = 0x1e960004; memory 0x8024 = 0x5c008030; memory 0x8028 = 0x1eb70010; memory 0x802c = 0x5c008030; memory 0x8030 = 0x954b000; memory 0x8034 = 0x975b800; memory 0x8038 = 0x5c008058; memory 0x803c = 0x1314b000; memory 0x8040 = 0x1335b800; memory 0x8044 = 0x1354b800; memory 0x8048 = 0x1375b000; memory 0x804c = 0xd58c800; memory 0x8050 = 0x97ad800; memory 0x8054 = 0x5c008058; memory 0x8058 = 0x88000000; memory 0x805c = 0x46600000; memory 0x8060 = 0x1000; memory 0x8064 = 0x46800000; memory 0x8068 = 0x1008; memory 0x806c = 0x4eb69800; memory 0x8070 = 0x4ef8a000; memory 0x8074 = 0xd2b7b610; memory 0x8078 = 0x52b6be00; memory 0x807c = 0x1550000; memory 0x8080 = 0x1760000; memory 0x8084 = 0x5c008098; memory 0x8088 = 0x56b6be00; memory 0x808c = 0x1550000; memory 0x8090 = 0x1760000; memory 0x8094 = 0x5c008098; memory 0x8098 = 0x88000000; memory 0x809c = 0x4000000; memory 0x80a0 = 0x45400000; memory 0x80a4 = 0x1000; memory 0x80a8 = 0x45600000; memory 0x80ac = 0x1008; memory 0x80b0 = 0x8400805c; memory 0x80b4 = 0x5200000; memory 0x80b8 = 0xc210000; memory 0x80bc = 0x4000000; memory 0x80c0 = 0x45400000; memory 0x80c4 = 0x1000; memory 0x80c8 = 0x45600000; memory 0x80cc = 0x1008; memory 0x80d0 = 0x84008000; memory 0x80d4 = 0x6400000; memory 0x80d8 = 0xc420000; memory 0x80dc = 0x8c000000; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "3/12/2023, 23:43:42",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}