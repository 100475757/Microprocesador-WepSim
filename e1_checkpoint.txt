
#
# Complex numbers
#


# -> Primera instruccion
la r1 u32    {
    co= 010001
    nwords=2
    r1=reg(25,21)
    u32=address(63,32)abs
    help='BR[RR1] ← U32',
    {
      #Cargamos el entero u32 (que es la direccion que vamos a cargar) en MAR
      (T2, C0),	
      #Carga el dato en MBR pasando a MAR la dirección que hay en PC, para ello activamos R (read) ; TA (Para acceder al bus de direcciones y BW para lectura, C1 para cargar el dato
      (TA, R, BW=11, M1=1, C1=1), 																			 
      #Cargamos en el registro r1 la direccion de memoria que es igual a U32 y volvemos al fetch para seguir con la siguiente instruccion
      (M2, C2, T1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0) 																													

  	}
}


# -> Segunda instruccion
sc r1 r2 (r3)     
{
  co= 010010
  nwords= 1
  r1= reg(25,21)
  r2= reg(20,16)
  r3= reg(15,11)
  help=	'MEM[RR3+0] ← BR[RR1] MEM[RR3+4] ← BR[RR2]'
  {
  #'Parte real; Val inmediato = 0'
  #Cargamos la direccion de r3 en MAR
  (MR=0, SELA=01011, T9=1, c0=1),		
  # Cargamos el contenido de r1 en MBR
  (MR=0, SELA=10101, T9=1, M1=0, C1=1), 
  #Guardamos el contenido de r1 en la direccion de memoria que es igual al contenido de r3
  (BW=11, TA=1, TD=1, W=1) 	
   
 	#'Parte imaginaria ; Val inmediato=4'
  #Sumamos 4 al contenido de r3, y cargamos el resultado en MAR
  (MR=0, SELA= 01011 , MA=0, MB=10, SelCop=01010, MC=1	T6= 1, C0=1), 
  #Cargamos el contenido de r2 en MBR
  (MR=0, SELA= 10000, T9=1, M1=0, C1=1),
  #Guardamos el contenido de r2 en la direccion de memoria que es igual al contenido de r3+4 y volvemos al fetch 
  (BW=11, TA=1, TD=1, W=1,  A0=1, B=1, C=0) 
  }  
}


# -> Tercera instruccion
lc r1 r2 (r3)     
{
	co= 010011
  nwords = 1
	r1=reg(25,21)
	r2=reg(20,16) 
	r3=reg(15,11)
  help= 'BR[RR1] ← MEM[RR3+0];BR[RR2] ← MEM[RR3+4]'
  {
   #'Parte real; Val inm=0'
   #Cargamos la dirección de memoria de r3 en MAR
   (MR=0, SELA= 01011, T9=1, C0=1), 
   #Leemos la dirección y cargamos el contenido de r3 en MBR 
   (TA= 1, R=1, BW=11, M1=1, C1=1),
   #Cargamos el resultado en el registro r1 (para ello utilizamos RC), activando la extensión de signo
   (T1=1, MR=0, SELC=10101, LC=1, SE=1) 
  
    #'Parte imaginaria; val inm=4'
   #Sumamos 4 al contenido del registro r3 y guardamos esa dirección en MAR
   (MR=0, SELA= 01011, MA=0, MB= 10, SelCop=01010, MC=1, T6=1, C0=1), 
   #Leemos la dirección y cargamos el contenido de r3+4 en MBR
   (TA=1,	R=1, BW=11, M1=1, C1=1),
   #Cargamos el resultado en el registro r2 (para ello utilizamos RC), activando la extensión de signo y volvemos al fetch
   (T1=1, MR=0,	SELC=10000, SE=1, LC=1, A0=1, B=1, C=0) 																												
  }
}

  
# -> Cuarta instruccion
addc  r1 r2 r3 r4    
{ 
	co= 010100
  nwords=1
	r1= reg(25,21)
  r2= reg(20,16)
  r3= reg(15,11)
  r4= reg(10,6)
  help= 'BR[RR1] ← BR[RR1] + BR[RR3]; BR[RR2] ← BR[RR2] + BR[RR4]'
  {
  #'Parte real'
  #Sumamos el contenido del registro r1 al contenido de r3 y actualizamos los valores C, V, N, Z
 	(MR=0, SELA= 10101, SELB= 01011, MA= 0, MB= 00, SelCop=	01010, MC=1,	T6=1, SELC= 10101, LC=1,	SELP=11, M7=1, C7=1),																																																							
  #'Parte imaginaria'
  #Hacemos lo mismo que en la parte entera, pero con los registros r2 y r4, sin actualizar los valores de C,V,N,Z
  (MR=0, SELA= 10000, SELB=00110, MA=0, MB= 00, SelCop= 01010, MC=1, T6=1, SELC= 10000, LC=1, A0=1, C=0, B=1) 
  }
}

# -> Quinta instruccion
mulc  r1 r2 r3 r4    
{
  co= 010101
  nwords=1
  r1= reg(25,21)
  r2= reg(20,16)
  r3= reg(15,11)
  r4= reg(10,6)
  help= 'BR[RR1] ← BR[RR1] * BR[RR3] - BR[RR2] * BR[RR4]; BR[RR2] ← BR[RR1] * BR[RR4] + BR[RR2] * BR[RR3]'
  {
  #'Parte real'
  #Hacemos la multiplicación de r1 y r3 y guardamos el resultado en el registro temporal RT1
  (MR=0, SELA=10101, SELB=01011, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C4=1, SE=1),
  #Hacemos la multiplicación de r2 y r4 y guardamos el resultado en el registro temporal RT2
  (MR=0, SELA=10000, SELB=00110, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C5=1, SE=1), 
  #Hacemos la resta de RT1-RT2, y alamcenamos el resultado en MBR
  (MA=1, MB=01, SelCop=01011, MC=1, T6=1 M1=0, C1=1, SELP=11, M7=1, C7=1)																																																																																																											
  #'Parte imaginaria'
  #Hacemos la multiplicación de r1 y r4 y guardamos el resultado en el registro temporal RT1
  (MR=0, SELA=10101, SELB=00110, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C4=1 SE=1),
  #Hacemos la multiplicación de r2 y r3 y guardamos el resultado en el registro temporal RT2  
  (MR=0, SELA=10000, SELB=01011, MA=0, MB=00, SelCop= 01100, MC=1, T6=1, C5=1, SE=1),
  #Hacemos la suma de RT1 + RT2 y alamcenamos el resultado en r2
  (MA=1, MB=01, SelCop= 01010, MC=1, T6=1, SELC= 10000, LC=1, SELP=11, M7=1, C7=1)
  #Actualizamos la parte real y volvemos al fetch
  (T1=1, SELC=10101, LC=1, A0=1, B=1, C=0)
  }
}


# -> Sexta instruccion
beqc  r1 r2 r3 r4 offset 
{
  co= 110100
  nwords=1
  r1= reg(25,21)
  r2= reg(20,16)
  r3= reg(15,11)
  r4=reg(10,6)
  offset= address(5,0)rel,
  help= 'if (r1 == r3) and (r2 == r4) pc += S6'
  { 
    		#MBR <- SR
    		(T8, M1=0, C1),
    		
        #'Primera condicion'
        #r1 - r3 y actualizo SR con los flags que vienen de la ultima operacion de la ALU
        (SELA=10101, SELB=1011, MC=1, SELCOP=1011, SELP=11, M7, C7)
    		#if sr.z != 1, saltamos a beqc1. if sr.z == 1, saltamos a la siguiente microinstruccion
        (A0=0, B=1, C=0110, MADDR=beqc1)	
    		
    
    		#'Segunda condicion'
  			#r2 - r4
  			(SELA=10000, SELB=110, MC=1, SELCOP=1011, SELP=11, M7, C7)
  			#if sr.z != 1, saltamos a beqc1. if sr.z == 1, saltamos a la siguiente microinstruccion
        (A0=0, B=1, C=0110, MADDR=beqc1)	
        
    		#'Si no ha saltado a la etiqueta beqc1:'
        # RT1 <- PC
        (T2, C4),
        #RT2 <- IR(OFFSET)
        (SE=1, OFFSET=0, SIZE=110, T3, C5),
        #PC <- RT1 + RT2
        (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
        #SR <- MBR
  			(T1, M7=0, C7), 
  			
beqc1: #SR <- MBR
    	 (T1, M7=0, C7),
  		 #salto al fetch
       (A0=1, B=1, C=0)	
  } 		
    
}    

# -> Septima instruccion
call u20     #Esto es un jal ra u20 
{
	co=100001
  nwords=1
  u20=address(19,0)abs
  help= 'BR[ra] ← PC; PC ← U20' 
  {
  #MR=1 para que el registro no salga del IR. 
  (T2=1, SELC=00001, MR=1, LC)
  #Cogemos del IR el entero u20 y lo cargamos en el PC
  (SE=0, OFFSET=0, SIZE=10100, T3=1, C2=1, A0=1, B=1, C=0)
  }  
}


# -> Octava instruccion
ret  #Esto es un jr ra 
{
	co=100010 
  nwords=1
  help='PC ← BR[ra]'
  {
   #MR=1 para que el registro no salga del IR. Pasamos el valor de ra por el bus interno para cargarlo en el PC.
  (MR=1, SELA=00001, T9=1, M2=0, C2=1, A0=1, B=1, C=0)
  }  
}



# -> Novena instruccion: esta no lleva salto al fetch
hcf   
{
  co=100011
  nwords=1
  help= 'PC ← 0x00 ; SR ← 0x00'
  {
  (ExCode=0000, T11, M2=0, C2)
  (T2=1, M7=0, C7=1)
  }
}



